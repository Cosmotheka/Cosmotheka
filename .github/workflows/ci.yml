name: continuous-integration
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:

  lint: 
    runs-on: ${{ matrix.os }}
    steps:
      - name: Run flake8
        uses: py-actions/flake8@v2
        with:
          path: "cosmotheka"

  tests:
    needs: lint
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ "3.10", "3.13" ]
        CC: [ gcc ]

    defaults:
      run:
        # IMPORTANT: this is needed to make sure that the conda environment is auto activated
        shell: bash -el {0} 

    steps:
        - uses: actions/checkout@v3

        - name: Set up mamba
          uses: conda-incubator/setup-miniconda@v2
          with:
            channels: conda-forge
            python-version: ${{ matrix.python-version }}
            show-channel-urls: true
            auto-update-conda: true
            use-mamba: true
            activate-environment: cosmotheka
            miniforge-version: latest

        - name: Install environment packages
          if: steps.cache.outputs.cache-hit != 'true'
          run: |
            export MAMBA_NO_BANNER=1
            mamba env update --file environment.yml

        - name: Install Cosmotheka
          run: | 
            pip install . --no-deps

        - name: Python unit tests
          run: coverage run --source=cosmotheka -m pytest -vv tests && coverage lcov

        - name: Collect coverage report
          uses: coverallsapp/github-action@v2
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            flag-name: run-${{ join(matrix.*, '-') }}
            parallel: true
            path-to-lcov: coverage.lcov

  finish:
    needs: tests
    name: Collect all coverage reports and publish to coveralls.io
    runs-on: ubuntu-latest

    steps:
    - name: Collect all coverage reports and publish to coveralls.io
      uses: coverallsapp/github-action@v2
      with:
        carryforward: "run-3.10-ubuntu-latest,run-3.13-ubuntu-latest"
        github-token: ${{ secrets.GITHUB_TOKEN }}
        parallel-finished: true
