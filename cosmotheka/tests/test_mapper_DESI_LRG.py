# Generated by copilot. Need to update, etc.
import pytest
import numpy as np
from astropy.table import Table
from cosmotheka.mappers.mapper_DESI_LRG import MapperDESILRG


class DummyConfig(dict):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.__dict__ = self


def make_minimal_config():
    return DummyConfig(
        zbin=0,
        data_catalog="dummy.fits",
        weights_catalog="dummy_weights.fits",
        file_dndz="dummy_dndz.txt",
        stardens_path="dummy_stardens.fits",
        imaging_weights_coeffs="dummy_weights.yaml",
        randoms_path="/tmp",
        randoms_selection=None,
        randoms_lrgmask_path="/tmp",
    )


def test_get_default_cuts():
    config = make_minimal_config()
    mapper = MapperDESILRG(config)
    cuts = mapper._get_default_cuts()
    assert isinstance(cuts, dict)
    assert "target_min_nobs" in cuts


def test_get_dtype_and_spin():
    config = make_minimal_config()
    mapper = MapperDESILRG(config)
    assert mapper.get_dtype() == "galaxy_density"
    assert mapper.get_spin() == 0


def test_suffix_generation():
    config = make_minimal_config()
    config["target_min_nobs"] = 2  # change from default
    mapper = MapperDESILRG(config)
    assert "targetminnobs2" in mapper.suffix or mapper.suffix == ""


def test_get_stardens_mask(monkeypatch):
    config = make_minimal_config()
    mapper = MapperDESILRG(config)
    # Patch fitsio.read and hp.npix2nside
    monkeypatch.setattr(
        "fitsio.read",
        lambda fname: Table({"HPXPIXEL": [0, 1], "STARDENS": [1000, 3000]}),
    )
    monkeypatch.setattr("healpy.npix2nside", lambda n: 2)
    monkeypatch.setattr(
        "healpy.ang2pix", lambda nside, ra, dec, lonlat: np.array([0, 1])
    )
    cat = Table({"RA": [0, 1], "DEC": [0, 1]})
    mask = mapper._get_stardens_mask(cat)
    assert isinstance(mask, np.ndarray)


def test_get_quality_cuts(monkeypatch):
    config = make_minimal_config()
    mapper = MapperDESILRG(config)
    # Patch _get_stardens_mask
    monkeypatch.setattr(
        mapper, "_get_stardens_mask", lambda cat: np.array([True, False, True])
    )
    cat = Table(
        {
            "lrg_mask": [0, 1, 0],
            "PIXEL_NOBS_G": [2, 2, 2],
            "PIXEL_NOBS_R": [2, 2, 2],
            "PIXEL_NOBS_Z": [2, 2, 2],
            "EBV": [0.1, 0.2, 0.05],
            "RA": [0, 1, 2],
            "DEC": [0, 1, 2],
        }
    )
    mask = mapper._get_quality_cuts(cat)
    assert isinstance(mask, np.ndarray)


def test_compute_weights(monkeypatch):
    config = make_minimal_config()
    mapper = MapperDESILRG(config)
    # Patch yaml.safe_load
    monkeypatch.setattr(
        "yaml.safe_load",
        lambda f: {
            "north_bin_1": {"intercept": 1, "A": 0},
            "south_bin_1": {"intercept": 1, "A": 0},
        },
    )
    # Patch open
    monkeypatch.setattr("builtins.open", lambda f, mode=None: f)
    # Patch _compute_weights_Noah
    monkeypatch.setattr(
        mapper,
        "_compute_weights_Noah",
        lambda randoms, coeffs, bin_index: np.ones(len(randoms)),
    )
    randoms = Table(
        {
            "GALDEPTH_G": [1.0],
            "GALDEPTH_R": [1.0],
            "GALDEPTH_Z": [1.0],
            "EBV": [0.1],
            "PHOTSYS": ["N"],
            "A": [1.0],
        }
    )
    weights = mapper.compute_weights(randoms)
    assert isinstance(weights, dict)
    assert any("weight_pzbin" in k for k in weights)
